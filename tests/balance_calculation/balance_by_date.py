"""
–ö–æ–º–∞–Ω–¥–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
–ó–∞–ø—É—Å–∫: python balance_by_date.py --date 2025-09-27
"""

import sys
import os
import argparse
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from src.mt5.mt5_client import mt5_data_provider, mt5_calculator


def parse_date(date_str):
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
    try:
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        formats = [
            "%Y-%m-%d",    # 2025-09-27
            "%d-%m-%Y",    # 27-09-2025
            "%d/%m/%Y",    # 27/09/2025
            "%d.%m.%Y",    # 27.09.2025
        ]
        
        for fmt in formats:
            try:
                return datetime.strptime(date_str, fmt)
            except ValueError:
                continue
        
        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date_str}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã: {e}")
        print("üìÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:")
        print("   ‚Ä¢ 2025-09-27")
        print("   ‚Ä¢ 27-09-2025") 
        print("   ‚Ä¢ 27/09/2025")
        print("   ‚Ä¢ 27.09.2025")
        sys.exit(1)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    parser = argparse.ArgumentParser(
        description="–†–∞—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python balance_by_date.py --date 2025-09-27
  python balance_by_date.py --date 27-09-2025 --end-of-day
  python balance_by_date.py --date 2025-10-10 --initial-balance 1000
  python balance_by_date.py --date 2025-09-30 --verbose
        """
    )
    
    parser.add_argument(
        '--date', '-d',
        required=True,
        help='–î–∞—Ç–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–∞ (—Ñ–æ—Ä–º–∞—Ç—ã: 2025-09-27, 27-09-2025, 27/09/2025, 27.09.2025)'
    )
    
    parser.add_argument(
        '--end-of-day',
        action='store_true',
        help='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ –∫–æ–Ω–µ—Ü –¥–Ω—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –Ω–∞—á–∞–ª–æ –¥–Ω—è)'
    )
    
    parser.add_argument(
        '--initial-balance',
        type=float,
        default=None,
        help='–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)'
    )
    
    parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥'
    )
    
    args = parser.parse_args()
    
    print("üßÆ –†–ê–°–ß–ï–¢ –ë–ê–õ–ê–ù–°–ê –ù–ê –î–ê–¢–£")
    print("=" * 50)
    
    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
    target_date = parse_date(args.date)
    
    print(f"üìÖ –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞: {target_date.strftime('%d.%m.%Y')}")
    print(f"üïê –†–µ–∂–∏–º: {'–ö–æ–Ω–µ—Ü –¥–Ω—è' if args.end_of_day else '–ù–∞—á–∞–ª–æ –¥–Ω—è'}")
    if args.initial_balance is not None:
        print(f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {args.initial_balance:.2f}")
    print()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
    print("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    # –†–∞—Å—à–∏—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–∞
    # –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
    from_date = datetime(2020, 1, 1)  # –ù–∞—á–∞–ª–æ –∏—Å—Ç–æ—Ä–∏–∏
    to_date = datetime.now() + timedelta(days=1)  # –î–æ –∑–∞–≤—Ç—Ä–∞
    
    deals, account_info = mt5_data_provider.get_history(
        from_date=from_date,
        to_date=to_date
    )
    
    if deals is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return
    
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–¥–µ–ª–æ–∫: {len(deals)}")
    print(f"üìÖ –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö: {from_date.strftime('%d.%m.%Y')} - {to_date.strftime('%d.%m.%Y')}")
    
    if account_info:
        print(f"üè¶ –ê–∫–∫–∞—É–Ω—Ç: {account_info.login}")
        print(f"üìà –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å MT5: {account_info.balance:.2f}")
    
    print()
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
    print("üßÆ –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("-" * 30)
    
    balance = mt5_calculator.calculate_balance_at_date(
        target_date=target_date,
        deals=deals,
        initial_balance=args.initial_balance,
        end_of_day=args.end_of_day
    )
    
    print(f"üìä –ë–∞–ª–∞–Ω—Å: {balance:.2f}")
    
    if account_info:
        difference = account_info.balance - balance
        print(f"üìà –û—Ç —Ç–µ–∫—É—â–µ–≥–æ: {difference:+.2f}")
    
    # –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
    if args.verbose:
        print()
        print("üìã –ü–û–î–†–û–ë–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
        print("-" * 40)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
        sorted_deals = sorted(deals, key=lambda x: x.time)
        
        deals_on_date = []
        for deal in sorted_deals:
            deal_time = datetime.fromtimestamp(deal.time)
            if deal_time.date() == target_date.date():
                deals_on_date.append(deal)
        
        print(f"–°–¥–µ–ª–æ–∫ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å: {len(deals_on_date)}")
        
        if deals_on_date:
            print("\n–°–¥–µ–ª–∫–∏:")
            total_profit = 0
            total_commission = 0
            total_swap = 0
            
            for deal in deals_on_date:
                deal_time = datetime.fromtimestamp(deal.time)
                print(f"  {deal_time.strftime('%H:%M:%S')} | –¢–∏–ø: {deal.type} | –ü—Ä–∏–±—ã–ª—å: {deal.profit:.2f}")
                total_profit += deal.profit
                total_commission += deal.commission
                total_swap += deal.swap
            
            print(f"\n–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å:")
            print(f"  –ü—Ä–∏–±—ã–ª—å: {total_profit:.2f}")
            print(f"  –ö–æ–º–∏—Å—Å–∏—è: {total_commission:.2f}")
            print(f"  –°–≤–æ–ø: {total_swap:.2f}")
    
    print()
    print("=" * 50)
    print("‚úÖ –†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüëã –†–∞—Å—á–µ—Ç –ø—Ä–µ—Ä–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
